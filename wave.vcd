$date
	Mon May 08 21:43:00 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module immediateGenerationUnit_tb $end
$scope module UUT $end
$var wire 32 ! instruction [31:0] $end
$var wire 1 " wire1 $end
$var wire 1 # wire2 $end
$var wire 1 $ wire3 $end
$var wire 2 % type [1:0] $end
$var wire 51 & sign [50:0] $end
$var wire 64 ' immediate [63:0] $end
$var wire 12 ( SWTypeImmediate [11:0] $end
$var wire 12 ) LWandAddiTypeImmediate [11:0] $end
$var wire 12 * BTypeImmediate [11:0] $end
$scope module muxImmeadite $end
$var wire 64 + A [63:0] $end
$var wire 64 , B [63:0] $end
$var wire 64 - C [63:0] $end
$var wire 2 . S [1:0] $end
$var reg 64 / X [63:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx /
bx .
bx0 -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
x$
x#
x"
bx !
$end
#10
b10 '
b10 /
0"
1#
b0 .
1$
b0 %
b0 &
b10 )
b0 (
b0 -
b0 *
b10 +
b0 ,
b1000000000000000010011 !
#20
b1111111111111111111111111111111111111111111111111111111111111110 '
b1111111111111111111111111111111111111111111111111111111111111110 /
b111111111111111111111111111111111111111111111111111 &
b111111111110 )
b111111100000 (
b1111111111111111111111111111111111111111111111111111011111100000 -
b101111110000 *
b1111111111111111111111111111111111111111111111111111111111111110 +
b1111111111111111111111111111111111111111111111111111111111100000 ,
b11111111111000000000000000010011 !
#30
b100 '
b100 /
1"
0#
b0 &
b100 )
b0 (
b0 -
b0 *
b100 +
b0 ,
b10000000010000000000011 !
#40
b1111111111111111111111111111111111111111111111111111111111111100 '
b1111111111111111111111111111111111111111111111111111111111111100 /
b111111111111111111111111111111111111111111111111111 &
b111111111100 )
b111111100000 (
b1111111111111111111111111111111111111111111111111111011111100000 -
b101111110000 *
b1111111111111111111111111111111111111111111111111111111111111100 +
b1111111111111111111111111111111111111111111111111111111111100000 ,
b11111111110000000010000000000011 !
#50
b1000 '
b1000 /
b1 .
b1 %
0"
0$
b0 &
b0 )
b1000 (
b1000 -
b100 *
b0 +
b1000 ,
b10010000100011 !
#60
b1111111111111111111111111111111111111111111111111111111111111000 '
b1111111111111111111111111111111111111111111111111111111111111000 /
b111111111111111111111111111111111111111111111111111 &
b111111100000 )
b111111111000 (
b1111111111111111111111111111111111111111111111111111011111111000 -
b101111111100 *
b1111111111111111111111111111111111111111111111111111111111100000 +
b1111111111111111111111111111111111111111111111111111111111111000 ,
b11111110000000000010110000100011 !
#70
b10000 '
b10000 /
1$
b10 .
b10 %
b0 &
b0 )
b10000 (
b10000 -
b1000 *
b0 +
b10000 ,
b100001100011 !
#80
b1111111111111111111111111111111111111111111111111111111111110000 '
b1111111111111111111111111111111111111111111111111111111111110000 /
b111111111111111111111111111111111111111111111111111 &
b111111100000 )
b111111110001 (
b1111111111111111111111111111111111111111111111111111111111110000 -
b111111111000 *
b1111111111111111111111111111111111111111111111111111111111100000 +
b1111111111111111111111111111111111111111111111111111111111110001 ,
b11111110000000000000100011100011 !
#90
